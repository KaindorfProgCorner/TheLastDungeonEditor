/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import beans.Cell;
import beans.Ground;
import beans.Trees;
import beans.Walls;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;

/**
 *
 * @author Robbo13
 */
public class EditorGUI extends javax.swing.JFrame {

  private Cell selected = null;
  private final int cellsize = 32;
  private String typeSelected = "";
  private boolean entfernen = false;
  private boolean showExtras = true;
  private boolean selectorOpen = false;
  private int SBx = 0;
  private int SBy = 0;
  private int speed = 5;
  private final String DELIM = ";";
  private String path = System.getProperty("user.dir")
          + File.separator + "src"
          + File.separator + "maps";

  public EditorGUI() {
    initComponents();
    pGraphic.setLayout(null);
    paExtras.setVisible(false);
    this.setTitle("The Last Dungeon_Editor");

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPopupMenu1 = new javax.swing.JPopupMenu();
    mWand = new javax.swing.JMenu();
    jMenuItem2 = new javax.swing.JMenuItem();
    paExtras = new javax.swing.JPanel();
    jLabel5 = new javax.swing.JLabel();
    jSlider1 = new javax.swing.JSlider();
    jCheckBox1 = new javax.swing.JCheckBox();
    paThings = new javax.swing.JPanel();
    lWand = new javax.swing.JLabel();
    lbTree = new javax.swing.JLabel();
    lbGround = new javax.swing.JLabel();
    lbRemove = new javax.swing.JLabel();
    lbClear = new javax.swing.JLabel();
    paArea = new javax.swing.JPanel();
    sbDown = new javax.swing.JScrollBar();
    sbRight = new javax.swing.JScrollBar();
    pGraphic = new javax.swing.JPanel();
    jMenuBar1 = new javax.swing.JMenuBar();
    mDatei = new javax.swing.JMenu();
    miLaden = new javax.swing.JMenuItem();
    miSpeichern = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();

    mWand.setText("jMenu3");

    jMenuItem2.setText("BVLA");
    mWand.add(jMenuItem2);

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setPreferredSize(new java.awt.Dimension(900, 900));

    paExtras.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
    paExtras.setLayout(new java.awt.GridLayout(10, 2, 5, 5));

    jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
    jLabel5.setText("Height:");
    paExtras.add(jLabel5);

    jSlider1.setMajorTickSpacing(1);
    jSlider1.setMaximum(10);
    jSlider1.setMinimum(1);
    jSlider1.setPaintLabels(true);
    jSlider1.setPaintTicks(true);
    jSlider1.setValue(1);
    paExtras.add(jSlider1);

    jCheckBox1.setSelected(true);
    jCheckBox1.setText("Only show cells on this height");
    paExtras.add(jCheckBox1);

    getContentPane().add(paExtras, java.awt.BorderLayout.LINE_START);

    paThings.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    paThings.setPreferredSize(new java.awt.Dimension(42, 432));
    java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 6);
    flowLayout1.setAlignOnBaseline(true);
    paThings.setLayout(flowLayout1);

    lWand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/walls/brick.png"))); // NOI18N
    lWand.setComponentPopupMenu(jPopupMenu1);
    lWand.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        onClicked(evt);
      }
      public void mouseEntered(java.awt.event.MouseEvent evt)
      {
        onEntered(evt);
      }
      public void mouseExited(java.awt.event.MouseEvent evt)
      {
        onExited(evt);
      }
    });
    paThings.add(lWand);

    lbTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/trees/tree.png"))); // NOI18N
    lbTree.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        onClicked(evt);
      }
      public void mouseEntered(java.awt.event.MouseEvent evt)
      {
        onEntered(evt);
      }
      public void mouseExited(java.awt.event.MouseEvent evt)
      {
        onExited(evt);
      }
    });
    paThings.add(lbTree);

    lbGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ground/grass.png"))); // NOI18N
    lbGround.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        onClicked(evt);
      }
      public void mouseEntered(java.awt.event.MouseEvent evt)
      {
        onEntered(evt);
      }
      public void mouseExited(java.awt.event.MouseEvent evt)
      {
        onExited(evt);
      }
    });
    paThings.add(lbGround);

    lbRemove.setFont(new java.awt.Font("Tahoma", 0, 32)); // NOI18N
    lbRemove.setForeground(new java.awt.Color(102, 0, 0));
    lbRemove.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lbRemove.setText("X");
    lbRemove.setPreferredSize(new java.awt.Dimension(32, 32));
    lbRemove.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        onDeleteSelected(evt);
      }
      public void mouseEntered(java.awt.event.MouseEvent evt)
      {
        onEntered(evt);
      }
      public void mouseExited(java.awt.event.MouseEvent evt)
      {
        onExited(evt);
      }
    });
    paThings.add(lbRemove);

    lbClear.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
    lbClear.setForeground(new java.awt.Color(102, 0, 0));
    lbClear.setText("DEL");
    lbClear.setPreferredSize(new java.awt.Dimension(32, 32));
    lbClear.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        onDeleteAll(evt);
      }
      public void mouseEntered(java.awt.event.MouseEvent evt)
      {
        onEntered(evt);
      }
      public void mouseExited(java.awt.event.MouseEvent evt)
      {
        onExited(evt);
      }
    });
    paThings.add(lbClear);

    getContentPane().add(paThings, java.awt.BorderLayout.LINE_END);

    paArea.setLayout(new java.awt.BorderLayout());

    sbDown.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    sbDown.setToolTipText("");
    sbDown.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        onScrollBarValueChangedDown(evt);
      }
    });
    paArea.add(sbDown, java.awt.BorderLayout.PAGE_END);

    sbRight.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        onScrollBarValueChangedRight(evt);
      }
    });
    paArea.add(sbRight, java.awt.BorderLayout.LINE_END);

    pGraphic.setBackground(new java.awt.Color(255, 255, 255));
    pGraphic.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
    {
      public void mouseDragged(java.awt.event.MouseEvent evt)
      {
        onDragMouseOverField(evt);
      }
      public void mouseMoved(java.awt.event.MouseEvent evt)
      {
        onMoveMouseOnField(evt);
      }
    });
    pGraphic.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        onClickMouseOverField(evt);
      }
      public void mouseEntered(java.awt.event.MouseEvent evt)
      {
        onEnteredField(evt);
      }
      public void mouseExited(java.awt.event.MouseEvent evt)
      {
        onExitedField(evt);
      }
    });
    pGraphic.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
    paArea.add(pGraphic, java.awt.BorderLayout.CENTER);

    getContentPane().add(paArea, java.awt.BorderLayout.CENTER);

    mDatei.setText("File");

    miLaden.setText("Load");
    miLaden.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onLoad(evt);
      }
    });
    mDatei.add(miLaden);

    miSpeichern.setText("Save");
    miSpeichern.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onSave(evt);
      }
    });
    mDatei.add(miSpeichern);

    jMenuBar1.add(mDatei);

    jMenu2.setText("Edit");
    jMenuBar1.add(jMenu2);

    jMenu1.setText("Extras");

    jMenuItem1.setText("Layer options");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onShowExtras(evt);
      }
    });
    jMenu1.add(jMenuItem1);

    jMenuBar1.add(jMenu1);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void onSave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSave
      try {
        Component[] comp = pGraphic.getComponents();
        JFileChooser fc = new JFileChooser(path);
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
          String filename = fc.getSelectedFile().getAbsolutePath();

          BufferedWriter bw = new BufferedWriter(new FileWriter(filename));

          for (Component component : comp) {
            Cell c = (Cell) component;
            String aus = "";
            aus = String.format("%d%s%d%s", c.getX(), DELIM, c.getY(), DELIM);
            String[] s = c.getIcon().toString().split("/");
            aus += s[s.length - 1] + DELIM;
            aus += String.format("%s%s%s%s", c.isDestroyable(), DELIM, c.isPassable(), DELIM);
            bw.write(aus);
            bw.newLine();
          }
          bw.close();
        }
      } catch (IOException ex) {
        Logger.getLogger(EditorGUI.class.getName()).log(Level.SEVERE, null, ex);
      }

    }//GEN-LAST:event_onSave

    private void onLoad(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onLoad

    }//GEN-LAST:event_onLoad

  //////////          On label clicked
    private void onClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onClicked
      if (((JLabel) evt.getSource()).getIcon().toString().endsWith("brick.png")) {
        WallSelector wallsel = new WallSelector(this, false);
        wallsel.setVisible(true);
        typeSelected = "brick";
      } else if (((JLabel) evt.getSource()).getIcon().toString().endsWith("grass.png")) {
        GroundSelector groundsel = new GroundSelector(this, false);
        groundsel.setVisible(true);
        typeSelected = "grass";
      } else {
        typeSelected = "tree";
        selected = new Trees(((JLabel) evt.getSource()).getIcon(), "tree");
        selected.setSize(cellsize, cellsize);
        System.out.println("Label selected!");
      }
    }//GEN-LAST:event_onClicked

  //////////          On label with mouse
    private void onEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onEntered
      JLabel label = (JLabel) evt.getSource();
      label.setBorder(new LineBorder(Color.yellow));
    }//GEN-LAST:event_onEntered

  //////////          Out label with mouse
    private void onExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onExited
      JLabel label = (JLabel) evt.getSource();
      label.setBorder(null);
    }//GEN-LAST:event_onExited

  //////////          On panel with mouse
    private void onEnteredField(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onEnteredField
      if (selected != null) {
        pGraphic.add(selected);
        this.updateGraphicPanel();
      }
    }//GEN-LAST:event_onEnteredField

  //////////          out panel with mouse
    private void onExitedField(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onExitedField
      if (selected != null) {
        pGraphic.remove(selected);
        this.updateGraphicPanel();
      }
    }//GEN-LAST:event_onExitedField

  //////////          move On panel with mouse
    private void onMoveMouseOnField(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMoveMouseOnField
      if (selected != null) {
        selected.setSize(cellsize, cellsize);
        selected.reloadLocation(evt.getX(), evt.getY(), cellsize, SBx, SBy, speed);
        this.updateGraphicPanel();
      }
    }//GEN-LAST:event_onMoveMouseOnField

  //////////          move scrolbar
    private void onScrollBarValueChangedRight(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_onScrollBarValueChangedRight
      for (Component comp : pGraphic.getComponents()) {
        if (evt.getValueIsAdjusting()) {
          comp.setLocation(comp.getX(), comp.getY() - (sbRight.getValue() - SBy) * 5);
          this.updateGraphicPanel();
        }
      }
      SBy = sbRight.getValue();
    }//GEN-LAST:event_onScrollBarValueChangedRight

  //////////          mouse clicked on panel
    private void onClickMouseOverField(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onClickMouseOverField
      if (evt.getButton() == MouseEvent.BUTTON1) {
        if (selected != null) {
          if (canDraw()) {
            draw();
          } else if (selected.isAlreadyThere(pGraphic)) {
            int x = selected.getX();
            int y = selected.getY();
            Cell c = (Cell) pGraphic.getComponentAt(x, y);
            if (selected.getType().equals("grass") && c.getType().equals("grass")) {
              pGraphic.remove(c);
              Cell cell = new Ground(selected.getIcon(), selected.getType());
              cell.setPlaced(true);
              cell.setVisible(true);
              cell.setSize(cellsize, cellsize);
              cell.setLocation(selected.getX(), selected.getY());
              pGraphic.add(cell);
            }
          }
        }
      } else if (evt.getButton() == MouseEvent.BUTTON3) {
        for (Component comp : pGraphic.getComponents()) {
          if (evt.getX() <= comp.getX() + cellsize - 1 && evt.getX() >= comp.getX()) {
            if (evt.getY() <= comp.getY() + cellsize - 1 && evt.getY() >= comp.getY()) {
              pGraphic.remove(comp);
            }
          }
        }
        if (selected != null) {
          selected.reloadLocation(evt.getX(), evt.getY(), cellsize, SBx, SBy, speed);
          pGraphic.add(selected);
        }
      }
      this.updateGraphicPanel();
    }//GEN-LAST:event_onClickMouseOverField

  //////////          mouse draged on panel
    private void onDragMouseOverField(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onDragMouseOverField
      if (SwingUtilities.isLeftMouseButton(evt)) {
        if (selected != null) {
          selected.reloadLocation(evt.getX(), evt.getY(), cellsize, SBx, SBy, speed);
          boolean b;
          if (b = canDraw()) {
            draw();
          } else if (selected.isAlreadyThere(pGraphic)) {
            int x = selected.getX();
            int y = selected.getY();
            Cell c = (Cell) pGraphic.getComponentAt(x, y);
            if (selected.getType().equals("grass") && c.getType().equals("grass")) {
              pGraphic.remove(c);
              Cell cell = new Ground(selected.getIcon(), selected.getType());
              cell.setPlaced(true);
              cell.setVisible(true);
              cell.setSize(cellsize, cellsize);
              cell.setLocation(selected.getX(), selected.getY());
              pGraphic.add(cell);
            }
          }
        }
      } else if (SwingUtilities.isRightMouseButton(evt)) {
        for (Component comp : pGraphic.getComponents()) {
          if (evt.getX() <= comp.getX() + cellsize - 1 && evt.getX() >= comp.getX()) {
            if (evt.getY() <= comp.getY() + cellsize - 1 && evt.getY() >= comp.getY()) {
              pGraphic.remove(comp);
            }
          }
        }
        if (selected != null) {
          selected.reloadLocation(evt.getX(), evt.getY(), cellsize, SBx, SBy, speed);
          pGraphic.add(selected);
        }
      }
      this.updateGraphicPanel();
    }//GEN-LAST:event_onDragMouseOverField

  //////////          move scrolbar
    private void onScrollBarValueChangedDown(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_onScrollBarValueChangedDown
      for (Component comp : pGraphic.getComponents()) {
        if (evt.getValueIsAdjusting()) {
          comp.setLocation(comp.getX() - (sbDown.getValue() - SBx) * 5, comp.getY());
          this.updateGraphicPanel();
        }
      }
      SBx = sbDown.getValue();
    }//GEN-LAST:event_onScrollBarValueChangedDown

  //////////          delete selected
    private void onDeleteSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onDeleteSelected
      selected = null;
    }//GEN-LAST:event_onDeleteSelected

  //////////          delete all
    private void onDeleteAll(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onDeleteAll
      pGraphic.removeAll();
      updateGraphicPanel();
    }//GEN-LAST:event_onDeleteAll

  //////////          show extras
  private void onShowExtras(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onShowExtras
  {//GEN-HEADEREND:event_onShowExtras
    paExtras.setVisible(showExtras);
    showExtras = !showExtras;
    System.out.println(showExtras);
  }//GEN-LAST:event_onShowExtras

  public void setSelected(Cell selected) {
    this.selected = selected;
  }

  private void draw() {
    Cell cell = null;
    Cell c = null;
    switch (selected.getType()) {
      case "tree":
        cell = new Trees(selected.getIcon(), selected.getType());
        c = (Cell) pGraphic.getComponentAt(selected.getX(), selected.getY());
        pGraphic.remove(c);
        cell.setPlaced(true);
        cell.setVisible(true);
        cell.setSize(cellsize, cellsize);
        cell.setLocation(selected.getX(), selected.getY());
        pGraphic.add(cell);
        pGraphic.add(c);
        break;
      case "wall":
        cell = new Walls(selected.getIcon(), selected.getType());
        cell.setPlaced(true);
        cell.setVisible(true);
        cell.setSize(cellsize, cellsize);
        cell.setLocation(selected.getX(), selected.getY());
        pGraphic.add(cell);
        break;
      case "grass":
        cell = new Ground(selected.getIcon(), selected.getType());
        cell.setPlaced(true);
        cell.setVisible(true);
        cell.setSize(cellsize, cellsize);
        cell.setLocation(selected.getX(), selected.getY());
        pGraphic.add(cell);
        break;
    }
    System.out.println("Cell added on (X: " + cell.getX() + " |Y: " + cell.getY() + ")!");
  }

  private boolean canDraw() {
    if (selected.isAlreadyThere(pGraphic)) {
      int x = selected.getX();
      int y = selected.getY();
      Cell c = (Cell) pGraphic.getComponentAt(x, y);
      switch (selected.getType()) {
        case "tree":
          return ((Trees) selected).setable(c);
        case "wall":
          return ((Walls) selected).setable(c);
        case "grass":
          return ((Ground) selected).setable(c);
        default:
          return false;
      }
    } else {
      return true;
    }
  }

  public void updateGraphicPanel() {
    /*for (Object obj : pGraphic.getComponents()) {
     Component comp = (Component)obj;
     }*/
    pGraphic.updateUI();
  }

  public boolean isSelectorOpen() {
    return selectorOpen;
  }

  public void setSelectorOpen(boolean selectorOpen) {
    this.selectorOpen = selectorOpen;
  }

  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;

        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(EditorGUI.class
              .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(EditorGUI.class
              .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(EditorGUI.class
              .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(EditorGUI.class
              .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new EditorGUI().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox jCheckBox1;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JPopupMenu jPopupMenu1;
  private javax.swing.JSlider jSlider1;
  private javax.swing.JLabel lWand;
  private javax.swing.JLabel lbClear;
  private javax.swing.JLabel lbGround;
  private javax.swing.JLabel lbRemove;
  private javax.swing.JLabel lbTree;
  private javax.swing.JMenu mDatei;
  private javax.swing.JMenu mWand;
  private javax.swing.JMenuItem miLaden;
  private javax.swing.JMenuItem miSpeichern;
  private javax.swing.JPanel pGraphic;
  private javax.swing.JPanel paArea;
  private javax.swing.JPanel paExtras;
  private javax.swing.JPanel paThings;
  private javax.swing.JScrollBar sbDown;
  private javax.swing.JScrollBar sbRight;
  // End of variables declaration//GEN-END:variables
}
