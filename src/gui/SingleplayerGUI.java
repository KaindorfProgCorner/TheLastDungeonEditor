/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import beans.Cell;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 *
 * @author Hans
 */
public class SingleplayerGUI extends javax.swing.JFrame {

  public static Cell[][] list = new Cell[1000][1000];
  /**
   * Creates new form SingleplayerGUI
   */
  public SingleplayerGUI() {
    initComponents(); 
    this.setSize(500, 500);
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//    this.setExtendedState(JFrame.MAXIMIZED_BOTH);
//    this.setUndecorated(true);
  }

  private String mapsPath = System.getProperty("user.dir")
          + File.separator + "src"
          + File.separator + "maps";
  private String bilderPath = System.getProperty("user.dir")
          + File.separator + "src"
          + File.separator + "res";

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    paSpielfeld = new KeyHandler();
    mbMenu = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    jMenuItem2 = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenuItem3 = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        onPressed(evt);
      }
      public void keyReleased(java.awt.event.KeyEvent evt) {
        onReleased(evt);
      }
    });

    javax.swing.GroupLayout paSpielfeldLayout = new javax.swing.GroupLayout(paSpielfeld);
    paSpielfeld.setLayout(paSpielfeldLayout);
    paSpielfeldLayout.setHorizontalGroup(
      paSpielfeldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    paSpielfeldLayout.setVerticalGroup(
      paSpielfeldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 279, Short.MAX_VALUE)
    );

    getContentPane().add(paSpielfeld, java.awt.BorderLayout.CENTER);

    jMenu1.setText("File");

    jMenuItem1.setText("Load");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        onLoad(evt);
      }
    });
    jMenu1.add(jMenuItem1);

    jMenuItem2.setText("Save");
    jMenu1.add(jMenuItem2);
    jMenu1.add(jSeparator1);

    jMenuItem3.setText("Close");
    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        onClose(evt);
      }
    });
    jMenu1.add(jMenuItem3);

    mbMenu.add(jMenu1);

    setJMenuBar(mbMenu);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void onLoad(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onLoad
    try {
      JFileChooser fc = new JFileChooser(mapsPath);
      if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        String filename = fc.getSelectedFile().getAbsolutePath();
        BufferedReader br = new BufferedReader(new FileReader(filename));
        while (br.ready()) {
          String line = br.readLine();
          String[] teile = line.split(";");
          int x = Integer.parseInt(teile[0]);
          int y = Integer.parseInt(teile[1]);
          ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + File.separator + "src" + File.separator + "res" + File.separator + "alle" + File.separator + teile[2]);
          boolean destroyable = Boolean.parseBoolean(teile[3]);
          boolean passable = Boolean.parseBoolean(teile[4]);
          Cell cell = new Cell(x, y, icon, destroyable, passable);
          list[cell.getX() / 32][cell.getY() / 32] = cell;
          cell.setVisible(true);
          cell.setSize(32, 32);
          paSpielfeld.add(cell);
          paSpielfeld.updateUI();
        }

        br.close();
      }
    } catch (IOException ex) {
      System.out.println("" + ex.getMessage());
    }
  }//GEN-LAST:event_onLoad

  private void onClose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onClose
    System.exit(0);
  }//GEN-LAST:event_onClose

  private void onPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onPressed
    if(evt.getKeyCode() == KeyEvent.VK_W)
    {
      KeyHandler.setUp(true);
    }
    if(evt.getKeyCode() == KeyEvent.VK_S)
    {
      KeyHandler.setDown(true);
    }
    if(evt.getKeyCode() == KeyEvent.VK_A)
    {
      KeyHandler.setLeft(true);
    }
    if(evt.getKeyCode() == KeyEvent.VK_D)
    {
      KeyHandler.setRight(true);
    }
  }//GEN-LAST:event_onPressed

  private void onReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onReleased
    if(evt.getKeyCode() == KeyEvent.VK_W)
    {
      KeyHandler.setUp(false);
    }
    if(evt.getKeyCode() == KeyEvent.VK_S)
    {
      KeyHandler.setDown(false);
    }
    if(evt.getKeyCode() == KeyEvent.VK_A)
    {
      KeyHandler.setLeft(false);
    }
    if(evt.getKeyCode() == KeyEvent.VK_D)
    {
      KeyHandler.setRight(false);
    }
  }//GEN-LAST:event_onReleased

  private boolean isInThisFolder(File folder, String filename) {
    File[] f = folder.listFiles();
    for (File file : f) {
      if (file.getName().equals(filename)) {
        System.out.println("Gefunden !!!!!!!!!!!!!!!!!!!!! " + file.getName());
        return true;
      }
    }
    return false;
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(SingleplayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(SingleplayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(SingleplayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(SingleplayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new SingleplayerGUI().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JMenuBar mbMenu;
  private javax.swing.JPanel paSpielfeld;
  // End of variables declaration//GEN-END:variables
}
